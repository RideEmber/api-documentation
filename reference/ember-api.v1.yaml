openapi: 3.0.0
info:
  title: Ember API
  version: '1.0'
  description: "A reference to all of Ember's API endpoints."
  contact:
    name: Ember
    url: 'https://www.ember.to'
    email: developer@ember.to
servers:
  - url: 'https://api.ember.to'
    description: Production
  - url: 'http://localhost:8000'
    description: Development
  - url: 'http://localhost:3100'
    description: Mock
paths:
  /locations:
    get:
      summary: Get Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
              examples:
                Stops List:
                  value:
                    - id: 10
                      name: Scotland
                      type: Country
                      description: null
                    - id: 9
                      name: Perth (Central Car Park)
                      type: Stop
                      description: null
                    - id: 11
                      name: Dundee
                      type: City
                      description: null
                    - id: 1
                      name: Dundee (Greenmarket)
                      type: Stop
                      description: null
                    - id: 2
                      name: Dundee West (Apollo Way)
                      type: Stop
                      description: null
                    - id: 12
                      name: Inchture
                      type: City
                      description: null
                    - id: 3
                      name: Inchture (Westbound)
                      type: Stop
                      description: null
                    - id: 8
                      name: Inchture (Eastbound)
                      type: Stop
                      description: null
                    - id: 13
                      name: Edinburgh
                      type: City
                      description: null
                    - id: 4
                      name: Edinburgh (Blackhall Library)
                      type: Stop
                      description: null
                    - id: 5
                      name: Edinburgh (Melville Street)
                      type: Stop
                      description: null
                    - id: 6
                      name: Ferrytoll Park and Ride
                      type: Stop
                      description: null
                    - id: 7
                      name: Kinross (Park and Ride)
                      type: Stop
                      description: null
                    - id: 14
                      name: Perth
                      type: City
                      description: null
                    - id: 15
                      name: Kinross
                      type: City
                      description: null
          headers: {}
      operationId: get-locations
      description: 'Get a list of possible stops to book a journey. The result is a list of `Location` objects. Note that `Location` objects may be groups of stops, such as cities or bus stations, or individual stops.'
      parameters: []
      tags:
        - Paths
    parameters: []
  /quotes:
    get:
      summary: Get Quotes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
              examples: {}
      operationId: get-quotes
      description: "Search for possible journeys between locations. In future, a journey could include a connection (i.e. a change of bus midway through the journey) but we don't support that for now. Full journey information will be returned, including pricing."
      parameters:
        - schema:
            type: integer
          example: 3
          in: query
          name: origin
          description: The departure Location ID
          required: true
        - schema:
            type: integer
          example: 10
          in: query
          name: destination
          description: The destination Location ID
          required: true
        - schema:
            type: string
            format: date-time
          in: query
          name: out_date_from
          description: Datetime they would like to leave after for outbound trip
        - schema:
            type: string
            format: date-time
          example: '2019-12-01T17:30:00'
          in: query
          name: out_date_to
          description: Datetime they would like to leave before for outbound trip
        - schema:
            type: string
            format: date-time
          in: query
          name: return_date_from
          description: Datetime they would like to leave after for return trip
        - schema:
            type: string
            format: date-time
          in: query
          name: return_date_to
          description: Datetime they would like to leave before for return trip
        - schema:
            type: integer
            minimum: 1
          in: query
          name: adults
          description: The total number of passengers travelling
        - schema:
            type: string
            items:
              $ref: '#/components/schemas/DiscountCards'
          in: query
          name: discounts
          description: A discount that should be taken into account â€“ e.g. concession pass. The discount parameter may be passed multiple times for multiple discounts
      tags:
        - Paths
    parameters: []
  /orders:
    post:
      summary: Create Order
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                  order:
                    $ref: '#/components/schemas/Order'
      operationId: post-orders
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tickets:
                  type: array
                  items:
                    $ref: '#/components/schemas/Ticket'
                customer:
                  $ref: '#/components/schemas/Customer'
                method:
                  type: string
                  description: "either 'card' or payment method id"
  '/orders/{uid}':
    parameters:
      - schema:
          type: string
        name: uid
        in: path
        required: true
    get:
      summary: Get Order by Id
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payment_intent:
                    $ref: '#/components/schemas/PaymentIntent'
                  customer:
                    $ref: '#/components/schemas/Customer'
                  paases:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pass'
      operationId: get-order-by-uid
      description: ''
  /trips:
    get:
      summary: Get Trips
      tags:
        - Paths
      responses:
        '200':
          description: OK
      operationId: get-trips
      description: 'This endpoint returs a list of trips, filtered by the given parameters. When called with no parameters the endpoint will return a list of all available trips.'
      parameters:
        - schema:
            type: string
            format: date-time
          in: query
          name: departure-time-from
          description: Filter out trips that depart before this datetime
        - schema:
            type: string
            format: date-time
          example: '2019-12-01T17:30:00'
          in: query
          name: departure-time-to
          description: Filter out trips that depart after this datetime
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival-time-from
          description: Filter out trips that arrive before this datetime
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival-time-to
          description: Filter out trips that arrive after this datetime
        - schema:
            type: integer
          example: 3
          in: query
          name: origin
          description: Filter to trips that start from this Location ID
        - schema:
            type: integer
          example: 10
          in: query
          name: destination
          description: Filter to trips that end at this Location ID
  '/trips/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Trip Info
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocationTime'
                  passes:
                    type: array
                    description: 'In this endpoint, the only customer data available is the name.'
                    items:
                      $ref: '#/components/schemas/Pass'
                  journeys:
                    type: object
                    description: A map of maps that contains the prices of all possible combinations of origin and destination
                    properties:
                      '{origin_id}':
                        type: object
                        properties:
                          '{destination_id}':
                            type: object
                            description: the price before discounts and fixed costs
                            properties:
                              reservations:
                                type: object
                                properties:
                                  seats:
                                    type: integer
                                  wheelchairs:
                                    type: integer
                                  bikes:
                                    type: integer
                              price:
                                type: integer
                  vehicle:
                    $ref: '#/components/schemas/Vehicle'
      operationId: get-trip-info
      description: ''
components:
  schemas:
    Location:
      type: object
      description: |-
        A place where passengers can be picked up or dropped off. This doesn't not necessarilly mean a single stop â€“ instead, a location can be one or many stops and is best thought of as an origin or destination that people might search for when booking a ticket.

        For example, people would generally want book a ticket from anywhere in a bus station, not a particular stance. In addition, your timetable might reference the bus station, rather than the stance number, when it is produced. Only closer to the time will you know the exact stance.

        Another example might be putting a city as a location â€“ e.g. passengers might just want a ticket that goes somewhere in London, rather than being concerned by the exact stop.
      x-examples: {}
      x-tags:
        - Models
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
        type:
          type: string
          enum:
            - CITY
            - STOP
            - STATION
        description:
          type: string
      required:
        - id
        - name
    Reservations:
      title: Reservations
      type: object
      description: 'A reservations of a seat or other facility (such as wheelchair space or bike space) on a single ride, typically with one vehicle.'
      x-examples:
        Dundee to Edinburgh:
          id: 1367
          origin:
            departure: '2020-05-19T23:00:00Z'
            location_id: 1
            stop_name: Dundee (Greenmarket)
          destination:
            arrival: '2020-05-20T00:45:00Z'
            location_id: 5
            location_name: Edinburgh (Melville Street)
      x-tags:
        - Models
      properties:
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        type:
          type: string
          enum:
            - SEAT
            - WHEELCHAIR
            - BIKE
          description: 'The type of reservation: 1) seat 2) wheelchair ...'
      required:
        - origin
        - destination
        - type
    LocationTime:
      type: object
      description: The stops that a vehicle is scheduled to make as part of a trip.
      x-tags:
        - Models
      properties:
        location_time_id:
          type: integer
          minimum: 1
        location:
          $ref: '#/components/schemas/Location'
        arrival_time:
          type: string
          format: date-time
        departure_time:
          type: string
          format: date-time
        allow_boarding:
          type: boolean
        allow_drop_off:
          type: string
      required:
        - location_time_id
        - location
    DiscountCards:
      type: string
      title: DiscountCards
      enum:
        - SCOT_CONCESSION
        - SCOT_UNDER_18
      x-tags:
        - Models
      description: Defines the accepted discount cards
    Ticket:
      title: Ticket
      type: object
      x-tags:
        - Models
      description: 'A ticket is a reservation for one seat in one or more legs. For example, a journey of one person that requires one bus change, will be booked as one ticket with two legs. In this case we are guaranteeing the connection â€“ i.e. if the customer misses the connecting bus, we will find a way to get them there.'
      properties:
        price:
          type: number
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservations'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountCards'
      required:
        - reservations
    Customer:
      title: Customer
      type: object
      x-tags:
        - Models
      properties:
        uid:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        postcode:
          type: string
    Order:
      title: Order
      type: object
      x-tags:
        - Models
      description: 'An order is an immutable list of tickets for purchase with a single payment reference. Once the payment is completed successfully, all the tickets in the order are considered to be "booked". Note that an order is a finalised basket, but creating an order does not depend on previously creating a basket.'
      properties:
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        payment_intent:
          $ref: '#/components/schemas/PaymentIntent'
        customer:
          $ref: '#/components/schemas/Customer'
        uid:
          type: string
          format: uuid
      required:
        - tickets
        - payment_intent
        - customer
    PaymentIntent:
      title: PaymentIntent
      type: object
      x-tags:
        - Models
      properties:
        pi_id:
          type: string
        client_secret:
          type: string
        status:
          type: string
          enum:
            - requires_payment_method
            - succeeded
            - requires_confirmation
        amount:
          type: integer
      required:
        - pi_id
        - client_secret
        - status
        - amount
    Quote:
      title: Quote
      type: object
      x-tags:
        - Models
      properties:
        base_price:
          type: integer
          description: the price before discounts and fixed costs
        vehicle:
          $ref: '#/components/schemas/Vehicle'
        reservations:
          type: object
          description: The amount of facilities already reserved on this journey. The keys are the types of reservations
          properties:
            '1':
              type: integer
            '2':
              type: integer
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
    Vehicle:
      title: Vehicle
      type: object
      x-tags:
        - Models
      properties:
        id:
          type: integer
        bicycle_spaces:
          type: integer
        seats:
          type: integer
        wheelchair_spaces:
          type: integer
    Trip:
      title: Trip
      type: object
      x-tags:
        - Models
      properties:
        id:
          type: integer
        origin:
          $ref: '#/components/schemas/Location'
        destination:
          $ref: '#/components/schemas/Location'
        departure_time:
          type: string
          format: date-time
        arrival_time:
          type: string
          format: date-time
        vehicle:
          $ref: '#/components/schemas/Vehicle'
    Pass:
      title: Pass
      type: object
      x-tags:
        - Models
      properties:
        code:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        reservations:
          $ref: '#/components/schemas/Reservations'
        created_at:
          type: string
          format: date-time
tags:
  - name: Models
  - name: Paths
