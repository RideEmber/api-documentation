openapi: 3.0.0
info:
  title: Ember API
  version: '1.0'
  description: "A reference to all of Ember's API endpoints."
  contact:
    name: Ember
    url: 'https://www.ember.to'
    email: developer@ember.to
servers:
  - url: 'https://api.ember.to'
    description: Production
  - url: 'http://localhost:8000'
    description: Development
  - url: 'http://localhost:3100'
    description: Mock
paths:
  /locations:
    get:
      summary: Get Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
              examples:
                Stops List:
                  value:
                    - id: 10
                      name: Scotland
                      type: Country
                      description: null
                    - id: 9
                      name: Perth (Central Car Park)
                      type: Stop
                      description: null
                    - id: 11
                      name: Dundee
                      type: City
                      description: null
                    - id: 1
                      name: Dundee (Greenmarket)
                      type: Stop
                      description: null
                    - id: 2
                      name: Dundee West (Apollo Way)
                      type: Stop
                      description: null
                    - id: 12
                      name: Inchture
                      type: City
                      description: null
                    - id: 3
                      name: Inchture (Westbound)
                      type: Stop
                      description: null
                    - id: 8
                      name: Inchture (Eastbound)
                      type: Stop
                      description: null
                    - id: 13
                      name: Edinburgh
                      type: City
                      description: null
                    - id: 4
                      name: Edinburgh (Blackhall Library)
                      type: Stop
                      description: null
                    - id: 5
                      name: Edinburgh (Melville Street)
                      type: Stop
                      description: null
                    - id: 6
                      name: Ferrytoll Park and Ride
                      type: Stop
                      description: null
                    - id: 7
                      name: Kinross (Park and Ride)
                      type: Stop
                      description: null
                    - id: 14
                      name: Perth
                      type: City
                      description: null
                    - id: 15
                      name: Kinross
                      type: City
                      description: null
          headers: {}
      operationId: get-locations
      description: 'Get a list of possible stops to book a journey. The result is a list of `Location` objects. Note that `Location` objects may be groups of stops, such as cities or bus stations, or individual stops.'
      parameters: []
      tags:
        - Paths
    parameters: []
  /quotes:
    get:
      summary: Get Quotes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
      operationId: get-quotes
      description: "Search for possible journeys between locations. In future, a journey could include a connection (i.e. a change of bus midway through the journey) but we don't support that for now. Full journey information will be returned, including pricing."
      parameters:
        - schema:
            type: integer
          example: 3
          in: query
          name: origin
          description: The departure Location ID
          required: true
        - schema:
            type: integer
          example: 10
          in: query
          name: destination
          description: The destination Location ID
          required: true
        - schema:
            type: string
            format: date-time
          in: query
          name: out_date_from
          description: Datetime they would like to leave after for outbound trip
        - schema:
            type: string
            format: date-time
          in: query
          name: out_date_to
          description: Datetime they would like to leave before for outbound trip
        - schema:
            type: string
            format: date-time
          in: query
          name: return_date_from
          description: Datetime they would like to leave after for return trip
        - schema:
            type: string
            format: date-time
          in: query
          name: return_date_to
          description: Datetime they would like to leave before for return trip
        - schema:
            type: integer
            minimum: 1
          in: query
          name: adults
          description: The total number of passengers travelling
        - schema:
            type: string
            items:
              $ref: '#/components/schemas/Discount'
          in: query
          name: discounts
          description: A discount that should be taken into account â€“ e.g. concession pass. The discount parameter may be passed multiple times for multiple discounts
      tags:
        - Paths
    parameters: []
  /orders:
    post:
      summary: Create Order
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        reservation:
                          $ref: '#/components/schemas/Reservation'
                  order:
                    $ref: '#/components/schemas/Order'
      operationId: post-orders
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tickets:
                  type: object
                  properties:
                    outbound:
                      type: array
                      items:
                        $ref: '#/components/schemas/Ticket'
                    return:
                      type: array
                      items:
                        $ref: '#/components/schemas/Ticket'
                customer:
                  $ref: '#/components/schemas/Customer'
                method:
                  type: string
                  description: "either 'card' or payment method id"
      description: 'Create a new order for one or many tickets. Payment will be then be taken, followed by order confirmation.'
  '/orders/{uid}':
    parameters:
      - schema:
          type: string
        name: uid
        in: path
        required: true
        description: ''
    get:
      summary: Get Order by Unique ID
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pass'
      operationId: get-order-by-uid
      description: 'Get the details of an order from a uid, without further authentication. Using a UID without authentication is a deliberate convenience feature that allows for things like sharing order URLs. Order UIDs should be kept private but this endpoint does not expose any personal data so the risk is limited.'
  /trips:
    get:
      summary: Get Trips
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'
      operationId: get-trips
      description: 'This endpoint returs a list of trips, filtered by the given parameters. When called with no parameters the endpoint will return a list of all available trips.'
      parameters:
        - schema:
            type: string
            format: date-time
          in: query
          name: departure-time-from
          description: Filter out trips that depart before this datetime
        - schema:
            type: string
            format: date-time
          in: query
          name: departure-time-to
          description: Filter out trips that depart after this datetime
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival-time-from
          description: Filter out trips that arrive before this datetime
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival-time-to
          description: Filter out trips that arrive after this datetime
        - schema:
            type: integer
          example: 3
          in: query
          name: origin
          description: Filter to trips that start from this Location ID
        - schema:
            type: integer
          example: 10
          in: query
          name: destination
          description: Filter to trips that end at this Location ID
  '/trips/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Trip Info
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  availability:
                    type: object
                    description: 'A map of maps that contains the available facilities of all possible combinations of origin and destination. '
                    properties:
                      '{origin_id}':
                        type: object
                        properties:
                          '{destination_id}':
                            $ref: '#/components/schemas/Availability'
                  prices:
                    type: object
                    description: A map of maps that contains the prices of all possible combinations of origin and destination
                    properties:
                      '{origin_id}':
                        type: object
                        properties:
                          '{destination_id}':
                            $ref: '#/components/schemas/Prices'
                  route:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocationTime'
                  passes:
                    type: array
                    description: 'This object contains passes, grouped by location time of origin'
                    items:
                      $ref: '#/components/schemas/Pass'
      operationId: get-trip-info
      description: 'Specify the info you want to receive by setting query parameters. You can set multiple parameters to get any combination of data, or set `all=true` to get all the available trip info.'
      parameters:
        - schema:
            type: boolean
          in: query
          name: all
          description: get all available trip info
        - schema:
            type: boolean
          in: query
          name: manifests
          description: get passes grouped by location times of origin
        - schema:
            type: boolean
          in: query
          name: availability
          description: get the availability for each possible journey
        - schema:
            type: boolean
          in: query
          name: prices
          description: get prices info
        - schema:
            type: boolean
          in: query
          name: vehicle
          description: get vehicle info
        - schema:
            type: boolean
          in: query
          name: location_times
          description: get list of location times
  /passes:
    post:
      summary: Mark Passes
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        pass:
                          $ref: '#/components/schemas/Pass'
      operationId: post-passes
      description: 'This endpoint allows to update and create passes, usually by the driver during the trip. For online bookings, the driver can update an existing pass status to `CANCEL` or `CHECKIN`. Partial checkin is done by spliting a pass into two passes. For onboard sales, the driver creates a new pass with a `CHECKIN` status upon payment confirmation.'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Pass'
    parameters: []
components:
  schemas:
    Location:
      type: object
      description: |-
        A place where passengers can be picked up or dropped off. This doesn't not necessarilly mean a single stop â€“ instead, a location can be one or many stops and is best thought of as an origin or destination that people might search for when booking a ticket.

        For example, people would generally want book a ticket from anywhere in a bus station, not a particular stance. In addition, your timetable might reference the bus station, rather than the stance number, when it is produced. Only closer to the time will you know the exact stance.

        Another example might be putting a city as a location â€“ e.g. passengers might just want a ticket that goes somewhere in London, rather than being concerned by the exact stop.
      x-examples: {}
      x-tags:
        - Models
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
        type:
          type: string
          enum:
            - CITY
            - STOP
            - STATION
        description:
          type: string
      required:
        - id
        - name
      title: Location
    LocationTime:
      type: object
      description: The stops that a vehicle is scheduled to make as part of a trip.
      x-tags:
        - Models
      properties:
        location_time_id:
          type: integer
          minimum: 1
        location:
          $ref: '#/components/schemas/Location'
        arrival_time:
          type: string
          format: date-time
        departure_time:
          type: string
          format: date-time
        allow_boarding:
          type: boolean
        allow_drop_off:
          type: string
      required:
        - location_time_id
        - location
      title: Location Time
    Ticket:
      title: Ticket
      type: object
      x-tags:
        - Models
      description: 'A ticket is a reservation for one seat (or other facility) in one or more legs. For example, a journey of one person that requires one bus change, will be booked as one ticket with two legs. In this case we are guaranteeing the connection â€“ i.e. if the customer misses the connecting bus, we will find a way to get them there.'
      properties:
        price:
          type: number
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
      required:
        - reservations
    Customer:
      title: Customer
      type: object
      x-tags:
        - Models
      properties:
        uid:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        postcode:
          type: string
    Order:
      title: Order
      type: object
      x-tags:
        - Models
      description: 'An order is a list of passes for purchase with a single payment reference. Once the payment is completed successfully, all the tickets in the order are considered to be "booked".'
      properties:
        uid:
          type: string
          format: uuid
        client_secret:
          type: string
        passes:
          type: array
          items:
            $ref: '#/components/schemas/Pass'
      required:
        - passes
    Quote:
      title: Quote
      type: object
      x-tags:
        - Models
      properties:
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        availability:
          $ref: '#/components/schemas/Availability'
        prices:
          $ref: '#/components/schemas/Prices'
    Vehicle:
      title: Vehicle
      type: object
      x-tags:
        - Models
      properties:
        id:
          type: integer
        wheelchair:
          type: integer
        seat:
          type: integer
        bicycle:
          type: integer
    Trip:
      title: Trip
      type: object
      x-tags:
        - Models
      properties:
        id:
          type: integer
        origin:
          $ref: '#/components/schemas/Location'
        destination:
          $ref: '#/components/schemas/Location'
        departure_time:
          type: string
          format: date-time
        arrival_time:
          type: string
          format: date-time
        vehicle:
          $ref: '#/components/schemas/Vehicle'
    Pass:
      title: Pass
      type: object
      x-tags:
        - Models
      description: A pass is a group of tickets that share the same start and final points. A pass may include tickets that contain a connection.
      properties:
        code:
          type: string
        tickets:
          $ref: '#/components/schemas/TicketGroup'
        created_at:
          type: string
          format: date-time
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        confirmation:
          $ref: '#/components/schemas/PassConfirmation'
        name:
          type: string
    PassConfirmation:
      title: Pass Confirmation
      type: object
      x-tags:
        - Models
      description: Used with the endpoint POST passes.
      properties:
        type:
          type: string
          enum:
            - CANCEL
            - CHECKIN
          description: Indicates if this pass is cancelled or used
        verification_type:
          type: string
          enum:
            - MANUAL
            - AUTOMATIC
          description: Indicates if the driver verified the pass manually or by reader (NFC or other)
        card_type:
          type: string
          enum:
            - SCOT_CONCESSION
            - CREDIT_CARD
            - PASS_CODE
            - OTHER_ID
        card_number:
          type: integer
        expire_date:
          type: string
          minLength: 4
          maxLength: 4
        name_on_card:
          type: string
        number_of_people_covered:
          type: integer
        blob:
          type: string
        warnings:
          type: string
      required:
        - type
    TicketGroup:
      title: Ticket Group
      type: object
      x-tags:
        - Models
      description: A simple map of the number of each type of resource and discount in a pass.
      properties:
        adults:
          type: integer
        bicycles:
          type: integer
        children:
          type: integer
        concessions:
          type: integer
        wheelchairs:
          type: integer
        young_children:
          type: integer
    Availability:
      title: Availability
      type: object
      x-tags:
        - Models
      properties:
        seat:
          type: number
        wheelchair:
          type: integer
        bicycle:
          type: integer
    Prices:
      title: Prices
      type: object
      x-tags:
        - Models
      properties:
        adult:
          type: integer
        child:
          type: integer
        young_child:
          type: integer
        concession:
          type: integer
        wheelchair:
          type: integer
        bicycle:
          type: integer
      description: A map of prices for all resouces and discounts
    Discount:
      type: string
      title: Discount
      description: Defines the accepted discounts
      enum:
        - UNDER_18
        - UNDER_5
        - OVER_65
      x-tags:
        - Models
    Reservation:
      title: Reservation
      type: object
      description: 'A reservation of a seat or other facility (such as wheelchair space or bike space) on a single ride, typically with one vehicle.'
      x-examples:
        Dundee to Edinburgh:
          id: 1367
          origin:
            departure: '2020-05-19T23:00:00Z'
            location_id: 1
            stop_name: Dundee (Greenmarket)
          destination:
            arrival: '2020-05-20T00:45:00Z'
            location_id: 5
            location_name: Edinburgh (Melville Street)
      x-tags:
        - Models
      properties:
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        type:
          type: string
          enum:
            - SEAT
            - WHEELCHAIR
            - BIKE
          description: 'The type of reservation: 1) seat 2) wheelchair ...'
      required:
        - origin
        - destination
        - type
tags:
  - name: Models
  - name: Paths
