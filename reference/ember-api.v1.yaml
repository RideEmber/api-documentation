openapi: 3.0.0
info:
  title: Ember API
  version: '1.0'
  description: "A reference to all of Ember's API endpoints."
  contact:
    name: Ember
    url: 'https://www.ember.to'
    email: developer@ember.to
servers:
  - url: 'https://api.ember.to'
    description: Production
  - url: 'http://localhost:8000'
    description: Development
  - url: 'http://localhost:3100'
    description: Mock
paths:
  /v1/locations/:
    get:
      summary: Get Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
              examples:
                Stops List:
                  value:
                    - id: 10
                      name: Scotland
                      type: COUNTRY
                      region_name: Scotland
                      detailed_name: Scotland
                      description: A beautiful country with lots of places to visit
                    - id: 9
                      name: Perth (Central Car Park)
                      type: STOP_POINT
                      region_name: Perth
                      detailed_name: Central Car Park
                      description: 'Near the centre of Perth, right next to Aldi'
                    - id: 11
                      name: Dundee
                      type: CITY
                      region_name: Dundee
                      detailed_name: Dundee
                    - id: 1
                      name: Dundee (Greenmarket)
                      type: STOP_POINT
                      region_name: Dundee
                      detailed_name: Greenmarket
                    - id: 2
                      name: Dundee West (Apollo Way)
                      type: STOP_POINT
                      region_name: Dundee West
                      detailed_name: Apollo Way
                    - id: 12
                      name: Inchture
                      type: CITY
                      region_name: Inchture
                      detailed_name: Inchture
                    - id: 3
                      name: Inchture (Westbound)
                      type: STOP_POINT
                      region_name: Inchture
                      detailed_name: Road End (Westbound)
                    - id: 8
                      name: Inchture (Eastbound)
                      type: STOP_POINT
                      region_name: Scotland
                      detailed_name: Scotland
                    - id: 13
                      name: Edinburgh
                      type: CITY
                      region_name: Edinburgh
                      detailed_name: Edinburgh
                    - id: 4
                      name: Edinburgh West
                      type: STOP_AREA
                      region_name: Edinburgh West
                      detailed_name: Blackhall Library (Eastbound)
          headers: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-locations
      description: |-
        Get a list of possible stops to book a journey. The result is a list of `Location` objects. Note that `Location` objects may be groups of stops, such as cities or bus stations, or individual stops.
        To get locations of a specific type, use the `type` search parameter.
      parameters:
        - schema:
            type: string
            enum:
              - CITY
              - STOP_POINT
              - STOP_AREA
              - STATION
              - COUNTRY
              - all
          in: query
          name: type
          description: The default value is `STOP_AREA`
      tags:
        - Paths
    parameters: []
  /v1/quotes/:
    get:
      summary: Get Quotes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
      operationId: get-quotes
      description: "Search for possible journeys between locations. In future, a journey could include a connection (i.e. a change of bus midway through the journey) but we don't support that for now. Full journey information will be returned, including pricing."
      parameters:
        - schema:
            type: integer
          example: 3
          in: query
          name: origin
          description: The departure Location ID
          required: true
        - schema:
            type: integer
          example: 10
          in: query
          name: destination
          description: The destination Location ID
          required: true
        - schema:
            type: string
            format: date-time
          in: query
          name: departure_date_from
          description: Datetime they would like to leave after
        - schema:
            type: string
            format: date-time
          in: query
          name: departure_date_to
          description: 'Datetime they would like to leave before '
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival_date_from
          description: Datetime they would like to arrive after
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival_date_to
          description: Datetime they would like to arrive before
      tags:
        - Paths
    parameters: []
  /v1/orders/:
    post:
      summary: Create Order
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
      operationId: post-orders
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passes:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/ReservationRequest'
                customer:
                  $ref: '#/components/schemas/Customer'
                method:
                  type: string
                  description: Required when the amount is bigger than 0. Value should be either`card` or a paymentMethod id for Apple/Google Pay
              required:
                - passes
                - customer
        description: ''
      description: 'Create a new order for one or many tickets. Payment will be then be taken, followed by order confirmation.'
    parameters: []
  '/v1/orders/{uid}/':
    parameters:
      - schema:
          type: string
        name: uid
        in: path
        required: true
        description: ''
    get:
      summary: Get Order by Unique ID
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pass'
        '402':
          description: Payment Required
      operationId: get-order-by-uid
      description: 'Get the details of an order from a uid, without further authentication. Using a UID without authentication is a deliberate convenience feature that allows for things like sharing order URLs. Order UIDs should be kept private but this endpoint does not expose any personal data so the risk is limited.'
      parameters:
        - schema:
            type: string
            enum:
              - succeeded
          in: query
          name: expected_status
          description: 'If the expected value does not match the current value, an error is returned. '
    put:
      tags:
        - Paths
      summary: Put Orders
      operationId: put-orders
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - CashRefundAmountTooHigh
                      - PaymentCanNotBeConverted
                      - CashRefundAmountTooLow
                      - RequestedRefundAmountIsTooHigh
      description: 'This unauthenticated endpoint is used to alter an order, primarily for cancellation. It means that any client with an Order UID can cancel passes from that order.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pass:
                  type: array
                  description: 'A list of pass codes to be deleted. If empty, all the passes in the order will be deleted'
                  items:
                    type: string
                card_refund:
                  type: number
                  minimum: 0
                  description: The amount of pennies to be refunded to card
                store_credit:
                  type: number
                  description: The amount of pennies to be converted to store credit
                  minimum: 0
              required:
                - card_refund
                - store_credit
  /v1/trips/:
    get:
      summary: Get Trips
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'
      operationId: get-trips
      description: 'This endpoint returs a list of trips, filtered by the given parameters. When called with no parameters the endpoint will return a list of all available trips.'
      parameters:
        - schema:
            type: string
            format: date
          in: query
          name: departure_time_from
          description: Filter out trips that depart before this datetime
        - schema:
            type: string
            format: date-time
          in: query
          name: departure_time_to
          description: Filter out trips that depart after this datetime
        - schema:
            type: string
            format: date
          in: query
          name: arrival_time_from
          description: Filter out trips that arrive before this datetime
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival_time_to
          description: Filter out trips that arrive after this datetime
        - schema:
            type: integer
          example: 3
          in: query
          name: origin
          description: Filter to trips that start from this Location ID
        - schema:
            type: integer
          example: 10
          in: query
          name: destination
          description: Filter to trips that end at this Location ID
    parameters: []
  '/v1/trips/{id}/':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Get Trip Info
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  availability:
                    type: object
                    description: 'A map of maps that contains the available facilities of all possible combinations of origin and destination. '
                    properties:
                      '{origin_locationtime_id}':
                        type: object
                        properties:
                          '{destination_locationtime_id}':
                            $ref: '#/components/schemas/Availability'
                  prices:
                    type: object
                    description: A map of maps that contains the prices of all possible combinations of origin and destination
                    properties:
                      '{origin_locationtime_id}':
                        type: object
                        properties:
                          '{destination_locationtime_id}':
                            $ref: '#/components/schemas/Prices'
                  route:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocationTime'
                  passes:
                    type: array
                    description: 'This object contains passes, grouped by location time of origin'
                    items:
                      $ref: '#/components/schemas/Pass'
      operationId: get-trip-info
      description: 'Use the query parameters to specify the info you want to receive. You can set multiple parameters to get any combination of data, or set `all=true` to get all the available trip info.'
      parameters:
        - schema:
            type: boolean
          in: query
          name: all
          description: get all available trip info
        - schema:
            type: boolean
          in: query
          name: passes
          description: get all passes
        - schema:
            type: boolean
          in: query
          name: availability
          description: get the availability for each possible journey
        - schema:
            type: boolean
          in: query
          name: prices
          description: 'Get prices between all combinations of location times. On board prices are returned, including the fee'
        - schema:
            type: boolean
          in: query
          name: route
          description: get list of location times
  /v1/passes/:
    post:
      summary: Post Passes
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - EditedPass
                      - CreatedPass
                      - PassAlreadyExists
                      - UncheckedPass
                  warnings:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - TripOverBooked
                            - WrongPaymentAmount
                        details:
                          type:
                            - object
                            - string
                      required:
                        - type
                required:
                  - result
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
      operationId: post-passes
      description: |-
        This endpoint allows to update, cancel and create passes, usually by the driver during the trip. The action is determined by the schema of the body as described below.
        For onboard sales, the driver creates a new pass upon payment confirmation.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PassCheckIn'
                - $ref: '#/components/schemas/PassPartialCheckIn'
                - $ref: '#/components/schemas/PassCancel'
                - $ref: '#/components/schemas/PassPurchase'
                - $ref: '#/components/schemas/PassUncheckIn'
          application/xml:
            schema:
              type: object
              properties: {}
        description: ''
    parameters: []
  /v1/times/actuals/:
    post:
      summary: Update Actual Times
      tags:
        - Paths
      responses:
        '200':
          description: OK
      operationId: post-v1-times
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                location_time_id:
                  type: integer
                departure:
                  type: string
                  format: date-time
                arrival:
                  type: string
                  format: date-time
              required:
                - location_time_id
        description: ''
      description: 'Update the actual times of arrival/departure for a location time. '
    parameters: []
  /v1/times/estimates/:
    post:
      summary: Update Time Estimates
      tags:
        - Paths
      responses:
        '200':
          description: OK
      operationId: post-v1-times-estimates
      description: 'Update the estimated time of arrival/departure for a location time. '
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                location_time_id:
                  type: integer
                estimation_time:
                  type: string
                  format: date-time
                  description: The time you made the estimation
                departure:
                  type: string
                  format: date-time
                arrival:
                  type: string
                  format: date-time
              required:
                - location_time_id
                - estimation_time
                - departure
                - arrival
    parameters: []
  /v1/sumup/tokens/:
    get:
      description: Get a SumUp authentication token. Used by driver app to log in to SumUp account without the need for a separate password.
      summary: Get SumUp Token
      tags:
        - Paths
      responses:
        '200':
          description: Bearer XXXXXXXXX
      operationId: get-sumup-tokens
    parameters: []
  /v1/sumup/confirmations/:
    get:
      summary: Confirm SumUp Payments
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pending_confirmation_amount:
                    type: number
                  successfully_confirmed:
                    type: number
                required:
                  - pending_confirmation_amount
                  - successfully_confirmed
      operationId: get-sumup-confirmations
      description: 'When calling this endpoint, the system will try to confirm with SumUp that all pending payments have been payed. The returned objects contains the number of unconfirmed payments in the system before the request, and the number of cofirmations made.'
    parameters: []
  /v1/vehicles/:
    get:
      summary: Get Vehicles Live Info
      description: "Get live details on each vehicle, including telematics data and it's assigned trips. For Authenticated users - drivers or admins, the endpoint will return extended telematry data."
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
      operationId: get-vehicles
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: ''
    parameters: []
  /v1/service-updates/:
    get:
      summary: Get Service Update
      description: 'Get the current service update, if available. Service updates are added for major events (e.g. cancellations) where we want to show a message on the website and perhaps other channels. A maximum of one service update is returned at a time.'
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      result:
                        $ref: '#/components/schemas/ServiceUpdate'
                    required:
                      - result
                  - properties:
                      result:
                        type: 'null'
                    description: When there are no updates
                    required:
                      - result
                type: object
      operationId: get-service-updates
      parameters:
        - schema:
            type: string
            format: date-time
          in: query
          name: as_of
          description: Defaults to now
    parameters: []
  /v1/login/:
    post:
      summary: Create Login Link
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
      operationId: post-login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                redirect:
                  type: string
                  format: uri
                  description: The user will be routed to this url on successful login
                voucher:
                  type: string
                  description: A voucher code to be applied to this customer
                prompt_for_password:
                  type: boolean
                  description: Set to true to add a password login. Defaults to false.
              required:
                - email
      description: 'This endpoint sends a login link the the email address in the body. If there is no customer with this address, one will be created.'
    parameters: []
  /v1/refund-options/:
    get:
      summary: Get Refund Options
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - description: When type is `order`
                    properties:
                      refund_amount:
                        type: integer
                        description: 'The total amount of refund, i.e. the current value of the order'
                      max_cash_refund:
                        type: integer
                        description: The maximum amount that can be refunded to card if the order is cancelled
                    required:
                      - refund_amount
                      - max_cash_refund
                  - properties:
                      refundable_amount:
                        type: integer
                        description: 'The amount of cashable store credit '
                      refundable_payments:
                        type: array
                        description: The original card payment that were converted to store credit
                        items:
                          type: object
                          properties:
                            payment_id:
                              type: integer
                            created_at:
                              type: string
                              format: date-time
                            amount:
                              type: integer
                              description: Original trnsaction amount
                            refunded:
                              type: integer
                              description: The amount that was already refunded
                            net_store_credit:
                              type: integer
                              description: The maximum amount that can be refunded from this payment
                          required:
                            - payment_id
                            - created_at
                            - amount
                            - refunded
                            - net_store_credit
                    required:
                      - refundable_amount
                      - refundable_payments
                type: object
      operationId: get-refund-options
      description: "This endpoint returns the amount of cash refund and store credit that can be given to the customer. \nThere are two types of requests: \n 1. Refund options for an order - Returns the amount of cashable refund and non-cashable store credit that can received if the order is cancelled. If a list of passes is provided, only those passes will be regarded as cancelled.\n  2. Refund options for a customer - Returns the total amount a customer can request as refund, i.e. their cashable credit, And a list of payment they can request to refund from.\n\nNote that in both cases an `order_uid` is used as identifier."
      parameters:
        - schema:
            type: string
            enum:
              - order
              - customer
          in: query
          name: type
          required: true
        - schema:
            type: string
          in: query
          name: order_uid
          required: true
        - schema:
            type: array
          in: query
          name: passes
    parameters: []
  '/v1/orders/{uid}/refund-options':
    parameters:
      - schema:
          type: string
        name: uid
        in: path
        required: true
    get:
      summary: Get Refund Options for Order
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  refund_amount:
                    type: integer
                    description: 'The total amount of refund, i.e. the current value of the order'
                  max_cash_refund:
                    type: integer
                    description: The maximum amount that can be refunded to card if the order is cancelled
                required:
                  - refund_amount
                  - max_cash_refund
      operationId: get-v1-orders-uid-refund-options
      description: 'This endpoint returns the amount of cashable refund and non-cashable store credit that can received if the order is cancelled. If a list of passes is provided, only those passes will be regarded as cancelled, otherwise all passes will be cancelled.'
      parameters:
        - schema:
            type: array
          in: query
          name: passes
          description: A list of pass codes to be cancelled
  /v1/customers/:
    get:
      summary: Get Customers
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    uid:
                      type: string
                      format: uuid
                  required:
                    - email
                    - uid
      operationId: get-v1-customers
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
          description: JWT token
        - schema:
            type: string
          in: query
          name: name
          description: Filter name by string (case insasitive)
        - schema:
            type: string
          in: query
          name: email
          description: Filter email by string (case insasitive)
      description: This endpoint is for admins only.
  '/v1/customers/{uid}/':
    parameters:
      - schema:
          type: string
        name: uid
        in: path
        required: true
    get:
      summary: Get Customer Details
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetails'
        '401':
          description: Unauthorized
      operationId: get-v1-customers-uid
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
          description: JWT token
      description: This endpoint is for admins only.
    put:
      summary: Update Customer
      tags:
        - Paths
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      operationId: put-v1-customers-uid
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
          description: JWT token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                card_refund:
                  type: integer
                  description: "Amount to refund to the customer's card from their cashable store credit"
              required:
                - card_refund
  /v1/accounts/:
    get:
      summary: Get Customer Account
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetails'
      operationId: get-v1-accounts
      description: 'This endpoint returns the customers details for the logged in user, similar to `/customers/{uid}/` but available to all users.'
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: JWT token
components:
  schemas:
    Location:
      type: object
      description: |-
        A place where passengers can be picked up or dropped off. This doesn't not necessarilly mean a single stop – instead, a location can be one or many stops and is best thought of as an origin or destination that people might search for when booking a ticket.

        For example, people would generally want book a ticket from anywhere in a bus station, not a particular stance. In addition, your timetable might reference the bus station, rather than the stance number, when it is produced. Only closer to the time will you know the exact stance.

        Another example might be putting a city as a location – e.g. passengers might just want a ticket that goes somewhere in London, rather than being concerned by the exact stop.
      x-examples: {}
      x-tags:
        - Models
      title: Location
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
          maxLength: 50
          description: Should be sufficient to identify the location
        type:
          type: string
          enum:
            - STOP_POINT
            - STOP_AREA
            - STATION
            - CITY
            - COUNTRY
        region_name:
          type: string
        detailed_name:
          type: string
        description:
          type: string
          description: A worded description of the location
          maxLength: 240
        direction:
          type: string
          enum:
            - WESTBOUND
            - EASTBOUND
        lon:
          type: number
          description: Longitude
        lat:
          type: number
          description: Latitude
        google_place_id:
          type: string
        atco_code:
          type: string
      required:
        - id
        - name
        - type
        - region_name
        - detailed_name
    LocationTime:
      type: object
      description: The stops that a vehicle is scheduled to make as part of a trip.
      x-tags:
        - Models
      title: Location Time
      properties:
        id:
          type: integer
          minimum: 1
        location:
          $ref: '#/components/schemas/Location'
        allow_boarding:
          type: boolean
          description: ''
        allow_drop_off:
          type: boolean
          description: ''
        departure:
          type: object
          required:
            - scheduled
          properties:
            scheduled:
              type: string
              format: date-time
            actual:
              type: string
              format: date-time
            estimated:
              type: string
              format: date-time
        arrival:
          type: object
          required:
            - scheduled
          properties:
            scheduled:
              type: string
              format: date-time
            actual:
              type: string
              format: date-time
            estimated:
              type: string
              format: date-time
      required:
        - id
        - location
        - allow_boarding
        - allow_drop_off
        - departure
        - arrival
    Customer:
      title: Customer
      type: object
      x-tags:
        - Models
      properties:
        email:
          type: string
          format: email
          maxLength: 70
        name:
          type: string
          maxLength: 40
        postcode:
          type: string
          maxLength: 12
      required:
        - email
    Order:
      title: Order
      type: object
      x-tags:
        - Models
      description: 'An order is a list of passes for purchase with a single payment reference. Once the payment is completed successfully, all the tickets in the order are considered to be "booked".'
      properties:
        uid:
          type: string
          format: uuid
        payment_details:
          type: object
          required:
            - require_payment
          properties:
            require_payment:
              type: boolean
            client_secret:
              type: string
        passes:
          type: array
          items:
            $ref: '#/components/schemas/Pass'
      required:
        - uid
        - payment_details
        - passes
    Quote:
      title: Quote
      type: object
      x-tags:
        - Models
      properties:
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        availability:
          $ref: '#/components/schemas/Availability'
        prices:
          $ref: '#/components/schemas/Prices'
    VehicleResources:
      title: Vehicle Resources
      type: object
      x-tags:
        - Models
      properties:
        id:
          type: integer
        wheelchair:
          type: integer
        seat:
          type: integer
        bicycle:
          type: integer
    Trip:
      title: Trip
      type: object
      x-tags:
        - Models
      properties:
        id:
          type: integer
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        vehicle:
          $ref: '#/components/schemas/VehicleResources'
      required:
        - id
        - origin
        - destination
    Pass:
      title: Pass
      type: object
      x-tags:
        - Models
      description: A pass is a group of tickets that share the same start and final points. A pass may include tickets that contain a connection.
      properties:
        code:
          type: string
          maxLength: 9
        name:
          type: string
          maxLength: 50
        reservation_data:
          $ref: '#/components/schemas/ReservationResponse'
        boarding_data:
          $ref: '#/components/schemas/BoardingData'
        id:
          type: integer
          description: Not returned from all `/orders` endpoints
      required:
        - reservation_data
    Tickets:
      title: Tickets
      type: object
      x-tags:
        - Models
      description: |-
        This object is a map of the number of tickets from each type of resource and passengers in a pass.

        A ticket is a reservation for one seat (or other facility) in one or more legs. For example, a journey of one person that requires one bus change, will be booked as one ticket with two legs. In this case we are guaranteeing the connection – i.e. if the customer misses the connecting bus, we will find a way to get them there.
      properties:
        adult:
          type: integer
        bicycle:
          type: integer
        child:
          type: integer
        concession:
          type: integer
        wheelchair:
          type: integer
        young_child:
          type: integer
      required:
        - adult
        - bicycle
        - child
        - concession
        - wheelchair
        - young_child
    Availability:
      title: Availability
      type: object
      x-tags:
        - Models
      properties:
        seat:
          type: integer
        wheelchair:
          type: integer
        bicycle:
          type: integer
      required:
        - seat
        - wheelchair
        - bicycle
    Prices:
      title: Prices
      type: object
      x-tags:
        - Models
      properties:
        adult:
          type: integer
        child:
          type: integer
        young_child:
          type: integer
        concession:
          type: integer
        wheelchair:
          type: integer
        bicycle:
          type: integer
      description: A map of prices for all resources and discounts
    Discount:
      type: string
      title: Discount
      description: Defines the accepted discounts
      enum:
        - UNDER_18
        - UNDER_5
        - OVER_65
      x-tags:
        - Models
    ReservationResponse:
      title: Reservation Response
      type: object
      description: ''
      x-examples: {}
      x-tags:
        - Models
      properties:
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        tickets:
          $ref: '#/components/schemas/Tickets'
        creation_date:
          type: string
          format: date-time
        price:
          type: integer
          description: Price in pennies
        status:
          type: string
          enum:
            - pending_trip
            - pending_payment
            - cancelled
      required:
        - origin
        - destination
        - tickets
        - creation_date
        - price
        - status
    ReservationRequest:
      title: Reservation Request
      type: object
      description: ''
      x-examples: {}
      x-tags:
        - Models
      properties:
        origin:
          type: integer
          description: A location time id
        destination:
          type: integer
          description: A location time id
        tickets:
          $ref: '#/components/schemas/Tickets'
        creation_date:
          type: string
          format: date-time
      required:
        - origin
        - destination
        - tickets
        - creation_date
    ConcessionData:
      title: Concession Data
      x-tags:
        - Models
      description: Present only if there are concession tickets.
      type: object
      properties:
        confirmation_method:
          $ref: '#/components/schemas/ConfirmationMethod'
        type:
          type: string
          enum:
            - SCOT_NEC
        card_number:
          type: string
          maxLength: 30
        expiry_date:
          type: string
          format: date-time
        name_on_card:
          type: string
          maxLength: 50
        number_of_people_covered:
          type: integer
        json_blob:
          type: object
          description: Has to be a valid JSON
        warnings:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              description:
                type: string
            required:
              - type
      required:
        - confirmation_method
        - type
        - number_of_people_covered
    BoardingData:
      title: Boarding Data
      type: object
      x-tags:
        - Models
      description: ''
      properties:
        date:
          type: string
          format: date-time
        confirmation_method:
          $ref: '#/components/schemas/ConfirmationMethod'
        trip_id:
          type: integer
          description: This property is not returned from `/orders` resources
      required:
        - date
        - confirmation_method
        - trip_id
    PaymentData:
      title: Payment Data
      type: object
      x-tags:
        - Models
      description: Not required when the amount to pay is zero.
      properties:
        id:
          type: string
          format: uuid
          description: ''
        amount:
          type: integer
      required:
        - id
        - amount
    Error:
      title: Error
      type: object
      x-tags:
        - Models
      properties:
        error:
          type: string
          enum:
            - InvalidPayload
            - InvalidCustomerData
            - TripNotFound
            - AvailabilityError
            - MissingBoardingData
            - PassNotFound
            - InvalidReservationData
            - MissingPaymentData
            - InvalidPaymentData
            - MissingPassCreationDate
            - InvalidPassData
            - PassAlreadyExists
            - MissingPassesData
            - MissingPaymentMethod
            - InvalidOriginOrDestinationId
            - InvalidLocationType
            - WrongPaymentAmount
            - InvalidConcessionData
            - MissingConcessionData
            - ConcessionDataIsNotAList
            - RequestAlreadyCompleted
            - PaymentAlreadyExists
            - RequestedMoreTicketsThanPresentInPass
            - UnableToBookForThisDepartureTime
        payload:
          type: object
      required:
        - error
    PassCheckIn:
      title: Pass Check In
      type: object
      x-tags:
        - Models
        - Pass
      description: Check in an entire pass.
      properties:
        id:
          type: integer
        boarding_data:
          $ref: '#/components/schemas/BoardingData'
        concession_data:
          type: array
          items:
            $ref: '#/components/schemas/ConcessionData'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
      required:
        - id
        - boarding_data
    PassPartialCheckIn:
      title: Pass Partial Check In
      type: object
      x-tags:
        - Models
        - Pass
      description: Check in some passes and cancel the rest. The reservation data should reflect the passes that should not be cancelled.
      properties:
        id:
          type: integer
        boarding_data:
          $ref: '#/components/schemas/BoardingData'
        concession_data:
          type: array
          items:
            $ref: '#/components/schemas/ConcessionData'
        reservation_data:
          $ref: '#/components/schemas/ReservationRequest'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
      required:
        - id
        - boarding_data
        - reservation_data
    PassCancel:
      title: Pass Cancel
      type: object
      x-tags:
        - Models
        - Pass
      description: Cancel a pass by setting the ticket types in reservation_data to zero.
      properties:
        id:
          type: integer
        reservation_data:
          $ref: '#/components/schemas/ReservationRequest'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
      required:
        - id
        - reservation_data
    PassPurchase:
      title: Pass Purchase
      type: object
      x-tags:
        - Models
        - Pass
      description: Used for onboard ticket purchases.
      properties:
        boarding_data:
          $ref: '#/components/schemas/BoardingData'
        concession_data:
          type: array
          items:
            $ref: '#/components/schemas/ConcessionData'
        reservation_data:
          $ref: '#/components/schemas/ReservationRequest'
        payment_data:
          $ref: '#/components/schemas/PaymentData'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
      required:
        - boarding_data
        - reservation_data
    ConfirmationMethod:
      type: string
      title: Confirmation Method
      x-tags:
        - Models
      enum:
        - QR_CODE
        - NFC
        - ONBOARD_SALE
        - MANUAL
    IdempotencyKey:
      type: string
      title: Idempotency Key
      x-tags:
        - Models
      format: uuid
      description: Used for safely retrying a request
    PassUncheckIn:
      title: Pass Uncheck In
      type: object
      x-tags:
        - Models
        - Pass
      description: Undo a check-in for a specific trip
      properties:
        id:
          type: integer
        undo_boarding_trip_id:
          type: integer
      required:
        - id
        - undo_boarding_trip_id
    Vehicle:
      title: Vehicle
      type: object
      x-tags:
        - Models
      description: ''
      properties:
        id:
          type: integer
          description: The id of the vehicle
        plate_number:
          type: string
        previous_trip:
          type: object
          properties:
            id:
              type: number
            route_number:
              type: string
            route:
              type: array
              items:
                $ref: '#/components/schemas/LocationTime'
          required:
            - id
            - route_number
            - route
        next_trip:
          type: object
          properties:
            id:
              type: number
            route_number:
              type: string
            route:
              type: array
              items:
                $ref: '#/components/schemas/LocationTime'
          required:
            - id
            - route_number
            - route
        gps:
          type: object
          properties:
            last_updated:
              type: string
            longitude:
              type: number
            latitude:
              type: number
            heading:
              type: number
            elevation:
              type: number
              description: Auth required
            number_of_satellites:
              type: number
              description: Auth required
            speed:
              type: number
              description: Auth required
          required:
            - last_updated
            - longitude
            - latitude
            - heading
        vehicle_telematics:
          type: object
          description: Auth required
          properties:
            charger_status:
              $ref: '#/components/schemas/TelemartyDataPoint'
            battery_percentage:
              $ref: '#/components/schemas/TelemartyDataPoint'
            battery_voltage:
              $ref: '#/components/schemas/TelemartyDataPoint'
            battery_current:
              $ref: '#/components/schemas/TelemartyDataPoint'
            inside_temperature:
              $ref: '#/components/schemas/TelemartyDataPoint'
            outside_temperature:
              $ref: '#/components/schemas/TelemartyDataPoint'
            odometer_reading:
              $ref: '#/components/schemas/TelemartyDataPoint'
            highest_battery_temp:
              $ref: '#/components/schemas/TelemartyDataPoint'
            lowest_battery_temp:
              $ref: '#/components/schemas/TelemartyDataPoint'
          required:
            - charger_status
            - battery_percentage
            - battery_voltage
            - battery_current
            - inside_temperature
            - outside_temperature
            - odometer_reading
            - highest_battery_temp
            - lowest_battery_temp
      required:
        - id
        - plate_number
    ServiceUpdate:
      title: ServiceUpdate
      type: object
      x-tags:
        - Models
      properties:
        id:
          type: integer
        type:
          type: string
          enum:
            - other
            - cancellation
            - stop_location_change
            - vehicle_change
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        update_time:
          type: string
          format: date-time
          description: When this message was last updated
        short_message:
          type: string
          maxLength: 160
        detailed_message_md:
          type: string
          description: Markdown format
        detailed_message_rendered:
          type: string
          description: HTML format
        trip_id:
          type: integer
        location_id:
          type: integer
        link:
          type: string
          description: To be presented in the message summery
        link_label:
          type: string
          description: Required when link is present
      required:
        - id
        - type
        - start_time
        - end_time
        - update_time
        - short_message
        - detailed_message_md
        - detailed_message_rendered
    TelemartyDataPoint:
      title: TelemartyDataPoint
      type: object
      x-tags:
        - Models
      properties:
        value:
          type: number
        as_of:
          type: string
          format: date-time
      required:
        - value
        - as_of
    CustomerDetails:
      title: CustomerDetails
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Customer'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
        balance:
          type: object
          description: "Balance of the customer's Ember store credit account"
          properties:
            total:
              type: integer
            non_cashable:
              type: integer
            cashable:
              type: integer
          required:
            - total
      required:
        - profile
    OrderResponse:
      title: Order Response
      type: object
      x-tags:
        - Models
      description: An order response represents an existing order.
      properties:
        uid:
          type: string
          format: uuid
        passes:
          type: array
          items:
            $ref: '#/components/schemas/Pass'
        created_at:
          type: string
          format: date-time
        payments:
          type: array
          items:
            type: object
            properties:
              amount:
                type: integer
              status:
                type: string
                enum:
                  - succeeded
                  - failed
                  - pending_confirmation
              receipt_url:
                type: string
              provider:
                type: string
                enum:
                  - stripe
                  - sumup
                  - store_credit
            required:
              - amount
              - status
              - provider
      required:
        - uid
        - passes
        - created_at
        - payments
tags:
  - name: Models
  - name: Paths
