openapi: 3.0.0
info:
  title: Ember API
  version: '1.0'
  description: "A reference to all of Ember's API endpoints."
  contact:
    name: Ember
    url: 'https://www.ember.to'
    email: developer@ember.to
servers:
  - url: 'https://api.ember.to'
    description: Production
  - url: 'http://localhost:8000'
    description: Development
  - url: 'http://localhost:3100'
    description: Mock
paths:
  /v1/locations/:
    get:
      summary: Get Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
              examples:
                Stops List:
                  value:
                    - id: 10
                      name: Scotland
                      type: Country
                      description: null
                    - id: 9
                      name: Perth (Central Car Park)
                      type: Stop
                      description: null
                    - id: 11
                      name: Dundee
                      type: City
                      description: null
                    - id: 1
                      name: Dundee (Greenmarket)
                      type: Stop
                      description: null
                    - id: 2
                      name: Dundee West (Apollo Way)
                      type: Stop
                      description: null
                    - id: 12
                      name: Inchture
                      type: City
                      description: null
                    - id: 3
                      name: Inchture (Westbound)
                      type: Stop
                      description: null
                    - id: 8
                      name: Inchture (Eastbound)
                      type: Stop
                      description: null
                    - id: 13
                      name: Edinburgh
                      type: City
                      description: null
                    - id: 4
                      name: Edinburgh (Blackhall Library)
                      type: Stop
                      description: null
                    - id: 5
                      name: Edinburgh (Melville Street)
                      type: Stop
                      description: null
                    - id: 6
                      name: Ferrytoll Park and Ride
                      type: Stop
                      description: null
                    - id: 7
                      name: Kinross (Park and Ride)
                      type: Stop
                      description: null
                    - id: 14
                      name: Perth
                      type: City
                      description: null
                    - id: 15
                      name: Kinross
                      type: City
                      description: null
          headers: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-locations
      description: |-
        Get a list of possible stops to book a journey. The result is a list of `Location` objects. Note that `Location` objects may be groups of stops, such as cities or bus stations, or individual stops.
        To get locations of a specific type, use the `type` search parameter.
      parameters:
        - schema:
            type: string
            enum:
              - CITY
              - STOP_POINT
              - STOP_AREA
              - STATION
              - COUNTRY
              - all
          in: query
          name: type
          description: The default value is `STOP_AREA`
      tags:
        - Paths
    parameters: []
  /v1/quotes/:
    get:
      summary: Get Quotes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
      operationId: get-quotes
      description: "Search for possible journeys between locations. In future, a journey could include a connection (i.e. a change of bus midway through the journey) but we don't support that for now. Full journey information will be returned, including pricing."
      parameters:
        - schema:
            type: integer
          example: 3
          in: query
          name: origin
          description: The departure Location ID
          required: true
        - schema:
            type: integer
          example: 10
          in: query
          name: destination
          description: The destination Location ID
          required: true
        - schema:
            type: string
            format: date-time
          in: query
          name: departure_date_from
          description: Datetime they would like to leave after
        - schema:
            type: string
            format: date-time
          in: query
          name: departure_date_to
          description: 'Datetime they would like to leave before '
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival_date_from
          description: Datetime they would like to arrive after
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival_date_to
          description: Datetime they would like to arrive before
      tags:
        - Paths
    parameters: []
  /v1/orders/:
    post:
      summary: Create Order
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
      operationId: post-orders
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passes:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/ReservationRequest'
                customer:
                  $ref: '#/components/schemas/Customer'
                method:
                  type: string
                  description: Required when the amount is bigger than 0. Value should be either`card` or a paymentMethod id for Apple/Google Pay
              required:
                - passes
                - customer
        description: ''
      description: 'Create a new order for one or many tickets. Payment will be then be taken, followed by order confirmation.'
    parameters: []
  '/v1/orders/{uid}/':
    parameters:
      - schema:
          type: string
        name: uid
        in: path
        required: true
        description: ''
    get:
      summary: Get Order by Unique ID
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pass'
      operationId: get-order-by-uid
      description: 'Get the details of an order from a uid, without further authentication. Using a UID without authentication is a deliberate convenience feature that allows for things like sharing order URLs. Order UIDs should be kept private but this endpoint does not expose any personal data so the risk is limited.'
  /v1/trips/:
    get:
      summary: Get Trips
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'
      operationId: get-trips
      description: 'This endpoint returs a list of trips, filtered by the given parameters. When called with no parameters the endpoint will return a list of all available trips.'
      parameters:
        - schema:
            type: string
            format: date
          in: query
          name: departure_time_from
          description: Filter out trips that depart before this datetime
        - schema:
            type: string
            format: date-time
          in: query
          name: departure_time_to
          description: Filter out trips that depart after this datetime
        - schema:
            type: string
            format: date
          in: query
          name: arrival_time_from
          description: Filter out trips that arrive before this datetime
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival_time_to
          description: Filter out trips that arrive after this datetime
        - schema:
            type: integer
          example: 3
          in: query
          name: origin
          description: Filter to trips that start from this Location ID
        - schema:
            type: integer
          example: 10
          in: query
          name: destination
          description: Filter to trips that end at this Location ID
    parameters: []
  '/v1/trips/{id}/':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Get Trip Info
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  availability:
                    type: object
                    description: 'A map of maps that contains the available facilities of all possible combinations of origin and destination. '
                    properties:
                      '{origin_locationtime_id}':
                        type: object
                        properties:
                          '{destination_locationtime_id}':
                            $ref: '#/components/schemas/Availability'
                  prices:
                    type: object
                    description: A map of maps that contains the prices of all possible combinations of origin and destination
                    properties:
                      '{origin_locationtime_id}':
                        type: object
                        properties:
                          '{destination_locationtime_id}':
                            $ref: '#/components/schemas/Prices'
                  route:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocationTime'
                  passes:
                    type: array
                    description: 'This object contains passes, grouped by location time of origin'
                    items:
                      $ref: '#/components/schemas/Pass'
      operationId: get-trip-info
      description: 'Use the query parameters to specify the info you want to receive. You can set multiple parameters to get any combination of data, or set `all=true` to get all the available trip info.'
      parameters:
        - schema:
            type: boolean
          in: query
          name: all
          description: get all available trip info
        - schema:
            type: boolean
          in: query
          name: passes
          description: get all passes
        - schema:
            type: boolean
          in: query
          name: availability
          description: get the availability for each possible journey
        - schema:
            type: boolean
          in: query
          name: prices
          description: 'Get prices between all combinations of location times. On board prices are returned, including the fee'
        - schema:
            type: boolean
          in: query
          name: route
          description: get list of location times
  /v1/passes/:
    post:
      summary: Post Passes
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - EditedPass
                      - CreatedPass
                      - PassAlreadyExists
                      - UncheckedPass
                  warnings:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - TripOverBooked
                            - WrongPaymentAmount
                        details:
                          type:
                            - object
                            - string
                      required:
                        - type
                required:
                  - result
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
      operationId: post-passes
      description: |-
        This endpoint allows to update, cancel and create passes, usually by the driver during the trip. The action is determined by the schema of the body as described below.
        For onboard sales, the driver creates a new pass upon payment confirmation.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PassCheckIn'
                - $ref: '#/components/schemas/PassPartialCheckIn'
                - $ref: '#/components/schemas/PassCancel'
                - $ref: '#/components/schemas/PassPurchase'
                - $ref: '#/components/schemas/PassUncheckIn'
          application/xml:
            schema:
              type: object
              properties: {}
        description: ''
    parameters: []
  /v1/times/actuals/:
    post:
      summary: Update Actual Times
      tags:
        - Paths
      responses:
        '200':
          description: OK
      operationId: post-v1-times
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                location_time_id:
                  type: integer
                departure:
                  type: string
                  format: date-time
                arrival:
                  type: string
                  format: date-time
              required:
                - location_time_id
        description: ''
      description: 'Update the actual times of arrival/departure for a location time. '
    parameters: []
  /v1/times/estimates/:
    post:
      summary: Update Time Estimates
      tags:
        - Paths
      responses:
        '200':
          description: OK
      operationId: post-v1-times-estimates
      description: 'Update the estimated time of arrival/departure for a location time. '
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                location_time_id:
                  type: integer
                estimation_time:
                  type: string
                  format: date-time
                  description: The time you made the estimation
                departure:
                  type: string
                  format: date-time
                arrival:
                  type: string
                  format: date-time
              required:
                - location_time_id
                - estimation_time
                - departure
                - arrival
    parameters: []
  /sumup/tokens/:
    get:
      summary: Get SumUp Token
      tags:
        - Paths
      responses:
        '200':
          description: Bearer XXXXXXXXX
      operationId: get-sumup-tokens
  /sumup/confirmations/:
    get:
      summary: Confirm SumUp Payments
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pending_confirmation_amount:
                    type: number
                  successfully_confirmed:
                    type: number
                required:
                  - pending_confirmation_amount
                  - successfully_confirmed
      operationId: get-sumup-confirmations
      description: 'When calling this endpoint, the system will try to confirm with SumUp that all pending payments have been payed. The returned objects contains the number of unconfirmed payments in the system before the request, and the number of cofirmations made.'
  /v1/vehicles/telematics/:
    get:
      summary: Get Vehicles Live Info
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleTelemetryData'
      operationId: get-vehicles
      description: ''
    parameters: []
components:
  schemas:
    Location:
      type: object
      description: |-
        A place where passengers can be picked up or dropped off. This doesn't not necessarilly mean a single stop – instead, a location can be one or many stops and is best thought of as an origin or destination that people might search for when booking a ticket.

        For example, people would generally want book a ticket from anywhere in a bus station, not a particular stance. In addition, your timetable might reference the bus station, rather than the stance number, when it is produced. Only closer to the time will you know the exact stance.

        Another example might be putting a city as a location – e.g. passengers might just want a ticket that goes somewhere in London, rather than being concerned by the exact stop.
      x-examples: {}
      x-tags:
        - Models
      title: Location
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
          maxLength: 50
          description: Should be sufficient to identify the location
        type:
          type: string
          enum:
            - STOP_POINT
            - STOP_AREA
            - STATION
            - CITY
            - COUNTRY
        region_name:
          type: string
        detailed_name:
          type: string
        description:
          type: string
          description: A worded description of the location
          maxLength: 240
        direction:
          type: string
          enum:
            - WESTBOUND
            - EASTBOUND
        lon:
          type: number
          description: Longitude
        lat:
          type: number
          description: Latitude
        google_place_id:
          type: string
        atco_code:
          type: string
      required:
        - id
        - name
        - type
        - region_name
        - detailed_name
    LocationTime:
      type: object
      description: The stops that a vehicle is scheduled to make as part of a trip.
      x-tags:
        - Models
      title: Location Time
      properties:
        id:
          type: integer
          minimum: 1
        location:
          $ref: '#/components/schemas/Location'
        allow_boarding:
          type: boolean
          description: ''
        allow_drop_off:
          type: boolean
          description: ''
        departure:
          type: object
          required:
            - scheduled
          properties:
            scheduled:
              type: string
              format: date-time
            actual:
              type: string
              format: date-time
            estimated:
              type: string
              format: date-time
        arrival:
          type: object
          required:
            - scheduled
          properties:
            scheduled:
              type: string
              format: date-time
            actual:
              type: string
              format: date-time
            estimated:
              type: string
              format: date-time
      required:
        - id
        - location
        - allow_boarding
        - allow_drop_off
        - departure
        - arrival
    Customer:
      title: Customer
      type: object
      x-tags:
        - Models
      properties:
        email:
          type: string
          format: email
          maxLength: 70
        name:
          type: string
          maxLength: 40
        postcode:
          type: string
          maxLength: 12
      required:
        - email
    Order:
      title: Order
      type: object
      x-tags:
        - Models
      description: 'An order is a list of passes for purchase with a single payment reference. Once the payment is completed successfully, all the tickets in the order are considered to be "booked".'
      properties:
        uid:
          type: string
          format: uuid
        payment_details:
          type: object
          required:
            - require_payment
          properties:
            require_payment:
              type: boolean
            client_secret:
              type: string
        passes:
          type: array
          items:
            $ref: '#/components/schemas/Pass'
      required:
        - uid
        - payment_details
        - passes
    Quote:
      title: Quote
      type: object
      x-tags:
        - Models
      properties:
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        availability:
          $ref: '#/components/schemas/Availability'
        prices:
          $ref: '#/components/schemas/Prices'
    Vehicle:
      title: Vehicle
      type: object
      x-tags:
        - Models
      properties:
        id:
          type: integer
        wheelchair:
          type: integer
        seat:
          type: integer
        bicycle:
          type: integer
    Trip:
      title: Trip
      type: object
      x-tags:
        - Models
      properties:
        id:
          type: integer
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        vehicle:
          $ref: '#/components/schemas/Vehicle'
      required:
        - id
        - origin
        - destination
    Pass:
      title: Pass
      type: object
      x-tags:
        - Models
      description: A pass is a group of tickets that share the same start and final points. A pass may include tickets that contain a connection.
      properties:
        code:
          type: string
          maxLength: 9
        name:
          type: string
          maxLength: 50
        reservation_data:
          $ref: '#/components/schemas/ReservationResponse'
        boarding_data:
          $ref: '#/components/schemas/BoardingData'
        id:
          type: integer
          description: Not returned from all `/orders` endpoints
      required:
        - reservation_data
    Tickets:
      title: Tickets
      type: object
      x-tags:
        - Models
      description: |-
        This object is a map of the number of tickets from each type of resource and passengers in a pass.

        A ticket is a reservation for one seat (or other facility) in one or more legs. For example, a journey of one person that requires one bus change, will be booked as one ticket with two legs. In this case we are guaranteeing the connection – i.e. if the customer misses the connecting bus, we will find a way to get them there.
      properties:
        adult:
          type: integer
        bicycle:
          type: integer
        child:
          type: integer
        concession:
          type: integer
        wheelchair:
          type: integer
        young_child:
          type: integer
      required:
        - adult
        - bicycle
        - child
        - concession
        - wheelchair
        - young_child
    Availability:
      title: Availability
      type: object
      x-tags:
        - Models
      properties:
        seat:
          type: integer
        wheelchair:
          type: integer
        bicycle:
          type: integer
      required:
        - seat
        - wheelchair
        - bicycle
    Prices:
      title: Prices
      type: object
      x-tags:
        - Models
      properties:
        adult:
          type: integer
        child:
          type: integer
        young_child:
          type: integer
        concession:
          type: integer
        wheelchair:
          type: integer
        bicycle:
          type: integer
      description: A map of prices for all resources and discounts
    Discount:
      type: string
      title: Discount
      description: Defines the accepted discounts
      enum:
        - UNDER_18
        - UNDER_5
        - OVER_65
      x-tags:
        - Models
    ReservationResponse:
      title: Reservation Response
      type: object
      description: ''
      x-examples: {}
      x-tags:
        - Models
      properties:
        origin:
          $ref: '#/components/schemas/LocationTime'
        destination:
          $ref: '#/components/schemas/LocationTime'
        tickets:
          $ref: '#/components/schemas/Tickets'
        creation_date:
          type: string
          format: date-time
      required:
        - origin
        - destination
        - tickets
        - creation_date
    ReservationRequest:
      title: Reservation Request
      type: object
      description: ''
      x-examples: {}
      x-tags:
        - Models
      properties:
        origin:
          type: integer
          description: A location time id
        destination:
          type: integer
          description: A location time id
        tickets:
          $ref: '#/components/schemas/Tickets'
        creation_date:
          type: string
          format: date-time
      required:
        - origin
        - destination
        - tickets
        - creation_date
    ConcessionData:
      title: Concession Data
      x-tags:
        - Models
      description: Present only if there are concession tickets.
      type: object
      properties:
        confirmation_method:
          $ref: '#/components/schemas/ConfirmationMethod'
        type:
          type: string
          enum:
            - SCOT_NEC
        card_number:
          type: string
          maxLength: 30
        expiry_date:
          type: string
          format: date-time
        name_on_card:
          type: string
          maxLength: 50
        number_of_people_covered:
          type: integer
        json_blob:
          type: object
          description: Has to be a valid JSON
        warnings:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              description:
                type: string
            required:
              - type
      required:
        - confirmation_method
        - type
        - number_of_people_covered
    BoardingData:
      title: Boarding Data
      type: object
      x-tags:
        - Models
      description: ''
      properties:
        date:
          type: string
          format: date-time
        confirmation_method:
          $ref: '#/components/schemas/ConfirmationMethod'
        trip_id:
          type: integer
          description: This property is not returned from `/orders` resources
      required:
        - date
        - confirmation_method
        - trip_id
    PaymentData:
      title: Payment Data
      type: object
      x-tags:
        - Models
      description: Not required when the amount to pay is zero.
      properties:
        id:
          type: string
          format: uuid
          description: ''
        amount:
          type: integer
      required:
        - id
        - amount
    Error:
      title: Error
      type: object
      x-tags:
        - Models
      properties:
        error:
          type: string
          enum:
            - InvalidPayload
            - InvalidCustomerData
            - TripNotFound
            - AvailabilityError
            - MissingBoardingData
            - PassNotFound
            - InvalidReservationData
            - MissingPaymentData
            - InvalidPaymentData
            - MissingPassCreationDate
            - InvalidPassData
            - PassAlreadyExists
            - MissingPassesData
            - MissingPaymentMethod
            - InvalidOriginOrDestinationId
            - InvalidLocationType
            - WrongPaymentAmount
            - InvalidConcessionData
            - MissingConcessionData
            - ConcessionDataIsNotAList
            - RequestAlreadyCompleted
            - PaymentAlreadyExists
            - RequestedMoreTicketsThanPresentInPass
            - UnableToBookForThisDepartureTime
        payload:
          type: object
      required:
        - error
    PassCheckIn:
      title: Pass Check In
      type: object
      x-tags:
        - Models
        - Pass
      description: Check in an entire pass.
      properties:
        id:
          type: integer
        boarding_data:
          $ref: '#/components/schemas/BoardingData'
        concession_data:
          type: array
          items:
            $ref: '#/components/schemas/ConcessionData'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
      required:
        - id
        - boarding_data
    PassPartialCheckIn:
      title: Pass Partial Check In
      type: object
      x-tags:
        - Models
        - Pass
      description: Check in some passes and cancel the rest. The reservation data should reflect the passes that should not be cancelled.
      properties:
        id:
          type: integer
        boarding_data:
          $ref: '#/components/schemas/BoardingData'
        concession_data:
          type: array
          items:
            $ref: '#/components/schemas/ConcessionData'
        reservation_data:
          $ref: '#/components/schemas/ReservationRequest'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
      required:
        - id
        - boarding_data
        - reservation_data
    PassCancel:
      title: Pass Cancel
      type: object
      x-tags:
        - Models
        - Pass
      description: Cancel a pass by setting the ticket types in reservation_data to zero.
      properties:
        id:
          type: integer
        reservation_data:
          $ref: '#/components/schemas/ReservationRequest'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
      required:
        - id
        - reservation_data
    PassPurchase:
      title: Pass Purchase
      type: object
      x-tags:
        - Models
        - Pass
      description: Used for onboard ticket purchases.
      properties:
        boarding_data:
          $ref: '#/components/schemas/BoardingData'
        concession_data:
          type: array
          items:
            $ref: '#/components/schemas/ConcessionData'
        reservation_data:
          $ref: '#/components/schemas/ReservationRequest'
        payment_data:
          $ref: '#/components/schemas/PaymentData'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
      required:
        - boarding_data
        - reservation_data
    ConfirmationMethod:
      type: string
      title: Confirmation Method
      x-tags:
        - Models
      enum:
        - QR_CODE
        - NFC
        - ONBOARD_SALE
        - MANUAL
    IdempotencyKey:
      type: string
      title: Idempotency Key
      x-tags:
        - Models
      format: uuid
      description: Used for safely retrying a request
    PassUncheckIn:
      title: Pass Uncheck In
      type: object
      x-tags:
        - Models
        - Pass
      description: Undo a check-in for a specific trip
      properties:
        id:
          type: integer
        undo_boarding_trip_id:
          type: integer
      required:
        - id
        - undo_boarding_trip_id
    VehicleTelemetryData:
      title: Vehicle Telemetry Data
      type: object
      x-tags:
        - Models
      description: ''
      properties:
        device:
          type: string
          description: The id of the Capte device
        read_timestamp:
          type: string
          format: date-time
        postion_type:
          type: string
          enum:
            - Point
        position_coordinates:
          type: array
          items:
            type: number
      required:
        - device
        - read_timestamp
        - postion_type
        - position_coordinates
tags:
  - name: Models
  - name: Paths
