openapi: 3.0.0
info:
  title: Booking API
  version: '1.0'
  description: 'Ember that allow a customer to search for a journey, get a quote and book a ticket.'
  contact:
    name: Ember
    url: 'https://www.ember.to'
    email: developer@ember.to
servers:
  - url: 'https://api.ember.to/booking'
    description: Production
  - url: 'http://localhost:8000/booking'
    description: Development
  - url: 'http://localhost:3100'
    description: Mock
paths:
  /locations:
    get:
      summary: Get Locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './ember-scheduling-api.v1.yaml#/components/schemas/Location'
              examples:
                Stops List:
                  value:
                    - id: 10
                      name: Scotland
                      type: Country
                      description: null
                    - id: 9
                      name: Perth (Central Car Park)
                      type: Stop
                      description: null
                    - id: 11
                      name: Dundee
                      type: City
                      description: null
                    - id: 1
                      name: Dundee (Greenmarket)
                      type: Stop
                      description: null
                    - id: 2
                      name: Dundee West (Apollo Way)
                      type: Stop
                      description: null
                    - id: 12
                      name: Inchture
                      type: City
                      description: null
                    - id: 3
                      name: Inchture (Westbound)
                      type: Stop
                      description: null
                    - id: 8
                      name: Inchture (Eastbound)
                      type: Stop
                      description: null
                    - id: 13
                      name: Edinburgh
                      type: City
                      description: null
                    - id: 4
                      name: Edinburgh (Blackhall Library)
                      type: Stop
                      description: null
                    - id: 5
                      name: Edinburgh (Melville Street)
                      type: Stop
                      description: null
                    - id: 6
                      name: Ferrytoll Park and Ride
                      type: Stop
                      description: null
                    - id: 7
                      name: Kinross (Park and Ride)
                      type: Stop
                      description: null
                    - id: 14
                      name: Perth
                      type: City
                      description: null
                    - id: 15
                      name: Kinross
                      type: City
                      description: null
          headers: {}
      operationId: get-locations
      description: 'Get a list of possible stops to book a journey. the result is a list of `Location` objects, which includes groups of stops, such as cities.'
      parameters: []
      tags:
        - Paths
    parameters: []
  /quotes:
    get:
      summary: Get Quotes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  journeys:
                    type: array
                    items:
                      $ref: '#/components/schemas/Journey'
                  discounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/DiscountCards'
                  passengers:
                    type: integer
                    minimum: 1
                    maximum: 99
              examples: {}
      operationId: get-quotes
      description: "Search for possible journeys between locations. In future, journeys could include a change of bus but we don't support for now. Full journey information, including pricing, will be returned."
      parameters:
        - schema:
            type: integer
          example: 3
          in: query
          name: origin
          description: The ID of the desired departure location
          required: true
        - schema:
            type: integer
          example: 10
          in: query
          name: destination
          description: The ID of the desired destination location
          required: true
        - schema:
            type: string
            format: date-time
          in: query
          name: departure-time-from
          description: Datetime they would like to leave after
        - schema:
            type: string
            format: date-time
          example: '2019-12-01T17:30:00'
          in: query
          name: departure-time-to
          description: Datetime they would like to leave before
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival-time-from
          description: Datetime they would like to arrive after
        - schema:
            type: string
            format: date-time
          in: query
          name: arrival-time-to
          description: Datetime they would like to arrive before
        - schema:
            type: integer
            minimum: 1
          in: query
          name: passengers
          description: The total number of passengers travelling
        - schema:
            type: string
            items:
              $ref: '#/components/schemas/DiscountCards'
          in: query
          name: discounts
          description: Any discounts they are eligible for. The discount parameter may be passed multiple times â€“ once for each discount
        - schema:
            $ref: '#/components/schemas/Session'
          in: header
          name: x-session-id
          required: true
      tags:
        - Paths
    parameters: []
  /tickets:
    post:
      summary: Add Ticket to Basket
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
      operationId: post-tickets
      description: ''
      parameters:
        - schema:
            $ref: '#/components/schemas/Session'
          in: header
          name: x-session-id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        description: 'The payload comes from the qoute data. Note that the price is sent just for reference, and not guaranteed.'
  /orders:
    post:
      summary: Create Order
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: post-orders
      parameters:
        - schema:
            $ref: '#/components/schemas/Session'
          in: header
          name: x-session-id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
  '/orders/{uid}':
    parameters:
      - schema:
          type: string
        name: uid
        in: path
        required: true
    get:
      summary: Get Order by Id
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: get-order-by-uid
      description: ''
components:
  schemas:
    Leg:
      title: Leg
      type: object
      description: 'A leg is a single ride, typically with one vehicle.'
      x-examples:
        Dundee to Edinburgh:
          id: 1367
          origin:
            departure: '2020-05-19T23:00:00Z'
            location_id: 1
            stop_name: Dundee (Greenmarket)
          destination:
            arrival: '2020-05-20T00:45:00Z'
            location_id: 5
            location_name: Edinburgh (Melville Street)
      x-tags:
        - Models
      properties:
        origin:
          $ref: '#/components/schemas/JourneyStop'
        destination:
          $ref: '#/components/schemas/JourneyStop'
      required:
        - origin
        - destination
    JourneyStop:
      title: JourneyStop
      type: object
      description: 'A stop of a leg, either the origin or the destination.'
      x-examples:
        Dundee (Greenmarket):
          departure: '2020-05-19T23:00:00Z'
          location_time_id: 1
          location_name: Dundee (Greenmarket)
        Edinburgh (Melville Street):
          arrival: '2020-05-20T00:45:00Z'
          location_time_id: 5
          location_name: Edinburgh (Melville Street)
      x-tags:
        - Models
      properties:
        location_time_id:
          type: integer
          minimum: 1
        location_name:
          type: string
        departure:
          type: string
          format: date-time
        arrival:
          type: string
          format: date-time
        stop_description:
          type: string
      required:
        - location_time_id
    Journey:
      title: Journey
      type: object
      x-tags:
        - Models
      properties:
        legs:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Leg'
        price:
          type: number
          minimum: 0
      required:
        - legs
      description: A single journey includes at least one leg. A journey with multiple legs implies the passenger needs to change vehicles.
    DiscountCards:
      type: string
      title: DiscountCards
      enum:
        - SCOT_CONCESSION
        - SCOT_UNDER_18
      x-tags:
        - Models
      description: Defines the accepted discount cards
    Session:
      type: string
      title: Session
      format: uuid
      description: A uuid that is created by the client to identify the session
      x-tags:
        - Models
    Ticket:
      title: Ticket
      type: object
      x-tags:
        - Models
      properties:
        price:
          type: number
        legs:
          type: array
          items:
            $ref: '#/components/schemas/Leg'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountCards'
      required:
        - legs
      description: 'A ticket is a reservation for one seat in one or more legs. For example, a journey of one person that requires one bus change, will be booked as one ticket with two legs. In this case we are guaranteeing the connection â€“ i.e. if the customer misses the connecting bus, we will find a way to get them there.'
    Basket:
      title: Basket
      type: object
      x-tags:
        - Models
      description: "Like in most e-commerce sites, a basket is a group of tickets the custumer creates for later purchase. The customer can add or remove tickets from the basket as long as the basket's status is `open`."
      properties:
        amount:
          type: number
          description: The current total cost of the tickets in the basket
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
      required:
        - amount
        - tickets
    Custumer:
      title: Custumer
      type: object
      x-tags:
        - Models
      properties:
        uid:
          type: string
          format: uuid
        email:
          type: string
          format: email
      required:
        - email
    Order:
      title: Order
      type: object
      x-tags:
        - Models
      description: 'An order is an immutable list of tickets for purchase with a single payment reference. Once the payment is completed successfully, all the tickets in the order are considered to be "booked". Note that an order is a finalised basket, but creating an order does not depend on previously creating a basket.'
      properties:
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        payment_intent:
          $ref: '#/components/schemas/PaymentIntent'
        custumer:
          $ref: '#/components/schemas/Custumer'
        uid:
          type: string
          format: uuid
      required:
        - tickets
        - payment_intent
        - custumer
    PaymentIntent:
      title: PaymentIntent
      type: object
      x-tags:
        - Models
      properties:
        pi_id:
          type: string
        client_secret:
          type: string
        status:
          type: string
          enum:
            - requires_payment_method
            - succeeded
        amount:
          type: integer
      required:
        - pi_id
        - client_secret
        - status
        - amount
tags:
  - name: Models
  - name: Paths
